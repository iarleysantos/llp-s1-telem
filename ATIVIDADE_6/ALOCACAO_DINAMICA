#include <stdio.h>
#include <stdlib.h>

void inicializarMatriz(int **matriz, int linhas, int colunas) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            matriz[i][j] = i + j;
        }
    }
}

void somarMatrizes(int **matrizA, int **matrizB, int **matrizC, int linhas, int colunas) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            matrizA[i][j] = matrizB[i][j] + matrizC[i][j];
        }
    }
}

void mostrarMatriz(int **matriz, int linhas, int colunas) {
    for (int i = 0; i < linhas; i++) {
        for (int j = 0; j < colunas; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int main() {
    int linhas, colunas;

    printf("Digite o número de linhas das matrizes: ");
    scanf("%d", &linhas);

    printf("Digite o número de colunas das matrizes: ");
    scanf("%d", &colunas);

  
    int **matrizB = (int **)malloc(linhas * sizeof(int *));
    for (int i = 0; i < linhas; i++) {
        matrizB[i] = (int *)malloc(colunas * sizeof(int));
    }

    //iniciar matriz B
    inicializarMatriz(matrizB, linhas, colunas);

    
    int **matrizC = (int **)malloc(linhas * sizeof(int *));
    for (int i = 0; i < linhas; i++) {
        matrizC[i] = (int *)malloc(colunas * sizeof(int));
    }

    //iniciar matriz C
    inicializarMatriz(matrizC, linhas, colunas);

  
    int **matrizA = (int **)malloc(linhas * sizeof(int *));
    for (int i = 0; i < linhas; i++) {
        matrizA[i] = (int *)malloc(colunas * sizeof(int));
    }

    //calcular A = B+C
    somarMatrizes(matrizA, matrizB, matrizC, linhas, colunas);

    printf("Matriz A:\n");
    mostrarMatriz(matrizA, linhas, colunas);

    printf("Matriz B:\n");
    mostrarMatriz(matrizB, linhas, colunas);

    printf("Matriz C:\n");
    mostrarMatriz(matrizC, linhas, colunas);

    for (int i = 0; i < linhas; i++) {
        free(matrizB[i]);
        free(matrizC[i]);
        free(matrizA[i]);
    }
    free(matrizB);
    free(matrizC);
    free(matrizA);

    return 0;
}
